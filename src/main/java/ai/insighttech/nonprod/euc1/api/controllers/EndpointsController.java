/*
 * BotScoreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package ai.insighttech.nonprod.euc1.api.controllers;

import ai.insighttech.nonprod.euc1.api.ApiHelper;
import ai.insighttech.nonprod.euc1.api.Server;
import ai.insighttech.nonprod.euc1.api.exceptions.ApiException;
import ai.insighttech.nonprod.euc1.api.exceptions.BscoreList401ErrorException;
import ai.insighttech.nonprod.euc1.api.exceptions.BscoreList403ErrorException;
import ai.insighttech.nonprod.euc1.api.exceptions.BscoreList500ErrorException;
import ai.insighttech.nonprod.euc1.api.exceptions.BscoreRange400ErrorException;
import ai.insighttech.nonprod.euc1.api.exceptions.BscoreRange401ErrorException;
import ai.insighttech.nonprod.euc1.api.exceptions.BscoreRange403ErrorException;
import ai.insighttech.nonprod.euc1.api.exceptions.BscoreRange500ErrorException;
import ai.insighttech.nonprod.euc1.api.exceptions.BscoreSource401ErrorException;
import ai.insighttech.nonprod.euc1.api.exceptions.BscoreSource403ErrorException;
import ai.insighttech.nonprod.euc1.api.exceptions.BscoreSource500ErrorException;
import ai.insighttech.nonprod.euc1.api.http.request.HttpMethod;
import ai.insighttech.nonprod.euc1.api.models.BotScoreResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class EndpointsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public EndpointsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Fetches Bot Scores for all accounts associated with a specific bookmaker and sub-bookmaker.
     * If there are multiple pages of results, the response may include a lastEvaluatedKey for
     * pagination.
     * @param  bookmaker  Required parameter: Identifier for the bookmaker. Generated by Sportradar,
     *         contact your OAM or CI engineer in case of any issues with obtaining the correct
     *         value.
     * @param  subbookmaker  Required parameter: Identifier for the sub-bookmaker. Generated by
     *         Sportradar, contact your OAM or CI engineer in case of any issues with obtaining the
     *         correct value. Value * retrieves all data for a bookmaker.
     * @param  lastKey  Optional parameter: The response will start from the provided lastKey, which
     *         matches the lastEvaluatedKey from the previous call.
     * @return    Returns the BotScoreResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BotScoreResponse botScoreList(
            final String bookmaker,
            final String subbookmaker,
            final String lastKey) throws ApiException, IOException {
        return prepareBotScoreListRequest(bookmaker, subbookmaker, lastKey).execute();
    }

    /**
     * Fetches Bot Scores for all accounts associated with a specific bookmaker and sub-bookmaker.
     * If there are multiple pages of results, the response may include a lastEvaluatedKey for
     * pagination.
     * @param  bookmaker  Required parameter: Identifier for the bookmaker. Generated by Sportradar,
     *         contact your OAM or CI engineer in case of any issues with obtaining the correct
     *         value.
     * @param  subbookmaker  Required parameter: Identifier for the sub-bookmaker. Generated by
     *         Sportradar, contact your OAM or CI engineer in case of any issues with obtaining the
     *         correct value. Value * retrieves all data for a bookmaker.
     * @param  lastKey  Optional parameter: The response will start from the provided lastKey, which
     *         matches the lastEvaluatedKey from the previous call.
     * @return    Returns the BotScoreResponse response from the API call
     */
    public CompletableFuture<BotScoreResponse> botScoreListAsync(
            final String bookmaker,
            final String subbookmaker,
            final String lastKey) {
        try { 
            return prepareBotScoreListRequest(bookmaker, subbookmaker, lastKey).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for botScoreList.
     */
    private ApiCall<BotScoreResponse, ApiException> prepareBotScoreListRequest(
            final String bookmaker,
            final String subbookmaker,
            final String lastKey) throws IOException {
        return new ApiCall.Builder<BotScoreResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/bscore/{bookmaker}/{subbookmaker}/list")
                        .queryParam(param -> param.key("lastKey")
                                .value(lastKey).isRequired(false))
                        .templateParam(param -> param.key("bookmaker").value(bookmaker)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("subbookmaker").value(subbookmaker)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("mts-insight-tech-bot-score-authorizer"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BotScoreResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new BscoreList401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new BscoreList403ErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal Server Error",
                                (reason, context) -> new BscoreList500ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Fetches Bot Scores for a specified list of account IDs under a given bookmaker and
     * sub-bookmaker. If there are multiple pages of results, the response may include a
     * lastEvaluatedKey for pagination.
     * @param  customer  Required parameter: Comma-separated list of account IDs for which to
     *         retrieve data. Each account ID should belong to the specified bookmaker and
     *         sub-bookmaker.
     * @param  bookmaker  Required parameter: Identifier for the bookmaker. Generated by Sportradar,
     *         contact your OAM or CI engineer in case of any issues with obtaining the correct
     *         value.
     * @param  subbookmaker  Required parameter: Identifier for the sub-bookmaker. Generated by
     *         Sportradar, contact your OAM or CI engineer in case of any issues with obtaining the
     *         correct value. Value * retrieves all data for a bookmaker.
     * @return    Returns the BotScoreResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BotScoreResponse botScoreSource(
            final String customer,
            final String bookmaker,
            final String subbookmaker) throws ApiException, IOException {
        return prepareBotScoreSourceRequest(customer, bookmaker, subbookmaker).execute();
    }

    /**
     * Fetches Bot Scores for a specified list of account IDs under a given bookmaker and
     * sub-bookmaker. If there are multiple pages of results, the response may include a
     * lastEvaluatedKey for pagination.
     * @param  customer  Required parameter: Comma-separated list of account IDs for which to
     *         retrieve data. Each account ID should belong to the specified bookmaker and
     *         sub-bookmaker.
     * @param  bookmaker  Required parameter: Identifier for the bookmaker. Generated by Sportradar,
     *         contact your OAM or CI engineer in case of any issues with obtaining the correct
     *         value.
     * @param  subbookmaker  Required parameter: Identifier for the sub-bookmaker. Generated by
     *         Sportradar, contact your OAM or CI engineer in case of any issues with obtaining the
     *         correct value. Value * retrieves all data for a bookmaker.
     * @return    Returns the BotScoreResponse response from the API call
     */
    public CompletableFuture<BotScoreResponse> botScoreSourceAsync(
            final String customer,
            final String bookmaker,
            final String subbookmaker) {
        try { 
            return prepareBotScoreSourceRequest(customer, bookmaker, subbookmaker).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for botScoreSource.
     */
    private ApiCall<BotScoreResponse, ApiException> prepareBotScoreSourceRequest(
            final String customer,
            final String bookmaker,
            final String subbookmaker) throws IOException {
        return new ApiCall.Builder<BotScoreResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/bscore/{bookmaker}/{subbookmaker}/source")
                        .queryParam(param -> param.key("customer")
                                .value(customer))
                        .templateParam(param -> param.key("bookmaker").value(bookmaker)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("subbookmaker").value(subbookmaker)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("mts-insight-tech-bot-score-authorizer"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BotScoreResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new BscoreSource401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new BscoreSource403ErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal Server Error",
                                (reason, context) -> new BscoreSource500ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Fetches Bot Scores for accounts under a bookmaker and sub-bookmaker whose scores fall within
     * a specified range. If there are multiple pages of results, the response may include a
     * lastEvaluatedKey for pagination.
     * @param  bookmaker  Required parameter: Identifier for the bookmaker. Generated by Sportradar,
     *         contact your OAM or CI engineer in case of any issues with obtaining the correct
     *         value.
     * @param  subbookmaker  Required parameter: Identifier for the sub-bookmaker. Generated by
     *         Sportradar, contact your OAM or CI engineer in case of any issues with obtaining the
     *         correct value. Value * retrieves all data for a bookmaker.
     * @param  lower  Optional parameter: Lower threshold of the score range to retrieve data for.
     *         At least one of the lower/higher query parameters is required.
     * @param  higher  Optional parameter: Higher threshold of the score range to retrieve data for.
     *         At least one of the lower/higher query parameters is required.
     * @param  startKey  Optional parameter: The response will resume from the provided startKey,
     *         which matches the lastEvaluatedKey from the previous call.
     * @return    Returns the BotScoreResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BotScoreResponse botScoreRange(
            final String bookmaker,
            final String subbookmaker,
            final String lower,
            final String higher,
            final String startKey) throws ApiException, IOException {
        return prepareBotScoreRangeRequest(bookmaker, subbookmaker, lower, higher,
                startKey).execute();
    }

    /**
     * Fetches Bot Scores for accounts under a bookmaker and sub-bookmaker whose scores fall within
     * a specified range. If there are multiple pages of results, the response may include a
     * lastEvaluatedKey for pagination.
     * @param  bookmaker  Required parameter: Identifier for the bookmaker. Generated by Sportradar,
     *         contact your OAM or CI engineer in case of any issues with obtaining the correct
     *         value.
     * @param  subbookmaker  Required parameter: Identifier for the sub-bookmaker. Generated by
     *         Sportradar, contact your OAM or CI engineer in case of any issues with obtaining the
     *         correct value. Value * retrieves all data for a bookmaker.
     * @param  lower  Optional parameter: Lower threshold of the score range to retrieve data for.
     *         At least one of the lower/higher query parameters is required.
     * @param  higher  Optional parameter: Higher threshold of the score range to retrieve data for.
     *         At least one of the lower/higher query parameters is required.
     * @param  startKey  Optional parameter: The response will resume from the provided startKey,
     *         which matches the lastEvaluatedKey from the previous call.
     * @return    Returns the BotScoreResponse response from the API call
     */
    public CompletableFuture<BotScoreResponse> botScoreRangeAsync(
            final String bookmaker,
            final String subbookmaker,
            final String lower,
            final String higher,
            final String startKey) {
        try { 
            return prepareBotScoreRangeRequest(bookmaker, subbookmaker, lower, higher,
            startKey).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for botScoreRange.
     */
    private ApiCall<BotScoreResponse, ApiException> prepareBotScoreRangeRequest(
            final String bookmaker,
            final String subbookmaker,
            final String lower,
            final String higher,
            final String startKey) throws IOException {
        return new ApiCall.Builder<BotScoreResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/bscore/{bookmaker}/{subbookmaker}/range")
                        .queryParam(param -> param.key("lower")
                                .value(lower).isRequired(false))
                        .queryParam(param -> param.key("higher")
                                .value(higher).isRequired(false))
                        .queryParam(param -> param.key("startKey")
                                .value(startKey).isRequired(false))
                        .templateParam(param -> param.key("bookmaker").value(bookmaker)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("subbookmaker").value(subbookmaker)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("mts-insight-tech-bot-score-authorizer"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BotScoreResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request - The server could not understand the request due to invalid syntax.",
                                (reason, context) -> new BscoreRange400ErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new BscoreRange401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new BscoreRange403ErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal Server Error",
                                (reason, context) -> new BscoreRange500ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}